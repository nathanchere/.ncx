#!/usr/bin/env python
# Based on github.com/wavexx/acpilight

from __future__ import print_function, division, generators

APP_DESC = "control backlight brightness"
SYS_PATH = ["/sys/class/backlight", "/sys/class/leds"]

import argparse
from collections import OrderedDict
import os, sys
import time


def error(msg):
    print(sys.argv[0] + ": " + msg)

def get_controllers():
    ctrls = OrderedDict()
    for path in SYS_PATH:
        for name in os.listdir(path):
            ctrls[name] = os.path.join(path, name)
    return ctrls

def clamp(v, vmin, vmax):
    return max(min(v, vmax), vmin)

class Controller(object):
    def __init__(self, path):
        self._brightness_path = os.path.join(path, "brightness")
        self._max_brightness = int(open(os.path.join(path, "max_brightness")).read())

    def raw_brightness(self):
        return int(open(self._brightness_path).read())

    def brightness(self):
        return self.raw_brightness() * 100 / self._max_brightness

    def set_max_brightness(self):
        print(self._max_brightness)
        self.set_raw_brightness(self._max_brightness)

    def set_min_brightness(self):
        self.set_raw_brightness(1)

    def set_raw_brightness(self, b):
        value = str(int(round(b)))
        print(value)
        open(self._brightness_path, "w").write(value)

    def set_brightness(self, pc):
        self.set_raw_brightness(pc * self._max_brightness / 100)

def main():
    ap = argparse.ArgumentParser(description=APP_DESC, add_help=False)
    g = ap.add_mutually_exclusive_group(required=True)
    g.add_argument("-h", "-help", action="help", help="Show this help and exit")
    g.add_argument("-list", action="store_true", help="List controllers")
    g.add_argument("-getf", action="store_true", help="Get fractional brightness")
    g.add_argument("-get", action="store_true", help="Get brightness")
    g.add_argument("-set", metavar="PERCENT", type=float, help="Set brightness")
    g.add_argument("-inc", metavar="PERCENT", type=float, help="Increase brightness")
    g.add_argument("-dec", metavar="PERCENT", type=float, help="Decrease brightness")
    g.add_argument("-max", action="store_true", help="Set brightness to maximum")
    g.add_argument("-min", action="store_true", help="Set brightness to minimum visible value (i.e. not 0)")
    ap.add_argument("-ctrl", help="Set controller to use")
    args = ap.parse_args()

    # list controllers
    ctrls = get_controllers()
    if args.list:
        for name in ctrls:
            print(name)
        return 0

    # set current operating controller
    if args.ctrl is None:
        ctrl = Controller(next(iter(ctrls.values())))
    else:
        if args.ctrl not in ctrls:
            error("unknown controller '{}'".format(args.ctrl))
            return 1
        ctrl = Controller(ctrls[args.ctrl])

    # perform the requested action
    if args.getf:
        print(round(ctrl.brightness(), 2))
    elif args.get:
        print(int(round(ctrl.brightness())))
    elif args.max:
        ctrl.set_max_brightness()
    elif args.min:
        ctrl.set_min_brightness()
    else:
        current = ctrl.brightness()
        if args.set is not None:
            target = args.set
        elif args.inc is not None:
            target = current + args.inc
        elif args.dec is not None:
            target = current - args.dec
        target = clamp(target, 1, 100)
        if current == target:
            pass
        else:
            ctrl.set_brightness(target)
    return 0

if __name__ == "__main__":
    try:
        sys.exit(main())
    except IOError as e:
        error(str(e))
        sys.exit(1)
